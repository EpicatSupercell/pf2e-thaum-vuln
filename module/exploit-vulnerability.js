import {EXPLOIT_VULNERABILITY_ACTION_ID, MORTAL_WEAKNESS_EFFECT_SOURCEID, MORTAL_WEAKNESS_EFFECT_UUID, PERSONAL_ANTITHESIS_EFFECT_SOURCEID,
		PERSONAL_ANTITHESIS_EFFECT_UUID, FLAT_FOOTED_EFFECT_UUID, MORTAL_WEAKNESS_TARGET_SOURCEID, PERSONAL_ANTITHESIS_TARGET_SOURCEID,
		MORTAL_WEAKNESS_TARGET_UUID, PERSONAL_ANTITHESIS_TARGET_UUID, getActorEVEffect, getGreatestIWR, createEVDialog, createIWRContent} from "./utils.js";
import {createEffectOnTarget, updateEVEffect, deleteEVEffect} from "./socket.js";


//Creates the passed effect document on the actor
export async function createEffectOnActor(sa, t, effect) {
	let eff = effect.toObject();
	let creatureType;
	let evMode;
	if(eff.flags.core.sourceId === MORTAL_WEAKNESS_EFFECT_SOURCEID) {
		if(t.actor.system?.attributes?.weaknesses) {
			if(t.actor.system?.attributes?.weaknesses == ''){return ui.notifications.warn("There are no weaknesses on this creature to exploit a Mortal Weakness against.");}
			createEffectOnTarget(sa, t, effect);
		} else if(t.document.actorData.system?.attributes?.weaknesses) {
			if(t.document.actorData.system?.attributes?.weaknesses == ''){return ui.notifications.warn("There are no weaknesses on this creature to exploit a Mortal Weakness against.");}
			createEffectOnTarget(sa, t, effect);
		}

		if(t.actor.system.details.creatureType == ''){
			creatureType = "exploit-vulnerability";
		} else {
			creatureType = t.actor.system.details.creatureType.toLowerCase();
		}
		evMode = "mortal-weakness";

	} else if (eff.flags.core.sourceId === PERSONAL_ANTITHESIS_EFFECT_SOURCEID){
		evMode = "personal-antithesis";
		createEffectOnTarget(sa, t, effect);
	}
	await sa.setFlag("pf2e-thaum-vuln", "activeEV", true);
	await sa.setFlag("pf2e-thaum-vuln", "EVTargetID", `${t.actor.uuid}`);
	await sa.setFlag("pf2e-thaum-vuln", "EVTargetType", `${creatureType}`);
	await sa.setFlag("pf2e-thaum-vuln", "EVMode", `${evMode}`);	
	await sa.createEmbeddedDocuments('Item', [eff]);
}

export async function exploitVuln() {
	const DCByLevel = [13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 44, 46, 48, 50];
	const skillName = "Esoteric Lore";
	const skillKey = "esoteric-lore";
	const actionSlug = "action:recall-knowledge";
	const actionName = "Recall Knowledge";
	
	//grab the selected token and the targeted token
	const a = canvas.tokens.controlled;
	let ts = Array.from(game.user.targets);
	
	//make sure we're only targeting one target and have the thaum selected
	if (a.length != 1 || ts.length != 1){
		return ui.notifications.warn("Select one token and target one creature.")
	}
	
	//set the first index in the array as the target and the first controlled token actor as selected actor
	const t = Array.from(ts)[0];
	const sa = a[0].actor;
	
	//check for exploit vulnerability on the actor
	const exploitVulnAction = sa.items.find(item => item.getFlag("core", "sourceId") === EXPLOIT_VULNERABILITY_ACTION_ID);
	if (!exploitVulnAction) {
		return ui.notifications.warn(`${a[0].actor.name} does not have the ability to Exploit Vulnerability`);
	}
	
	//deletes Exploit Vulnerability effect if it already exists on the actor
	await deleteEVEffect(sa);
	//await deleteEVEffect(t.actor);
	
	//Exploit Vulnerability Effect/action - Tikael's macro code
	await exploitVulnAction.toMessage();
	const modifiers = [];
	let DC = DCByLevel[t.actor.system.details.level.value+1];
	const notes = [...sa.system.skills[skillKey].notes];

	const options = sa.getRollOptions(['all', 'skill-check', skillName.toLowerCase()]);
	options.push(`action:${actionSlug}`);

	let evRoll = await game.pf2e.Check.roll(
		new game.pf2e.CheckModifier(
			`<span class="pf2-icon">A</span> <b>${actionName}</b> - <p class="compact-text">${skillName } Skill Check</p>`,
			sa.system.skills[skillKey], modifiers), {
			actor: sa.actor,
			type: 'skill-check',
			options,
			notes,
			dc: {
			value: DC
			}
		},
		event
	);

	const paEffectSource = await fromUuid(PERSONAL_ANTITHESIS_EFFECT_UUID);
	const mwEffectSource = await fromUuid(MORTAL_WEAKNESS_EFFECT_UUID);
	const flatFootedEffect = await fromUuid(FLAT_FOOTED_EFFECT_UUID);
	let tWeak, tRes, tImm;
	if(t.actor.system?.attributes?.weaknesses) {
		tWeak = t.actor.system?.attributes?.weaknesses;
	} else if(t.document.actorData.system?.attributes?.weaknesses) {
		tWeak = t.document.actorData.system?.attributes?.weaknesses;
	}
	if(t.actor.system?.attributes?.resistances) {
		tRes = t.actor.system?.attributes?.resistances;
	} else if(t.document.actorData.system?.attributes?.resistances) {
		tRes = t.document.actorData.system?.attributes?.resistances;
	}
	if(t.actor.system?.attributes?.immunities) {
		tImm = t.actor.system?.attributes?.immunities;
	} else if(t.document.actorData.system?.attributes?.immunities) {
		tImm = t.document.actorData.system?.attributes?.immunities;
	}
	
	let evDialog;
	const iwrContent = createIWRContent(evRoll.degreeOfSuccess, tWeak, tRes, tImm);

	//Apply effect based on Degrees of success
	switch(evRoll.degreeOfSuccess)
	{
		case 0:
			//critical failure. Apply flatfooted condition for one round.
			await sa.createEmbeddedDocuments('Item', [flatFootedEffect.toObject()]);
			break;
		case 1:
			//normal failure. Can only apply personal antithesis.
			await sa.createEmbeddedDocuments('Item', [paEffectSource.toObject()]);
			await createEffectOnTarget(sa, t, paEffectSource);
			break;
		case 2:
			//normal success. Learns highest weakness. Can apply Mortal Weakness or Personal Antithesis
			evDialog = createEVDialog(sa, t, paEffectSource, mwEffectSource, iwrContent)
			evDialog.render(true);
			break;
		case 3:
			//Critical success. Learns all weaknesses, resistances, and immunities including the amounts and any unusual weaknesses or vulnerabilities
			//Can apply Mortal Weakness or Personal Antithesis. 
			evDialog = createEVDialog(sa, t, paEffectSource, mwEffectSource, iwrContent)
			evDialog.render(true);
			break;
		default:
			return;
	}
}

//This is a temporary macro that allows GMs to apply the same exploit vulnerability on a target (in the event of a critical success on the EV roll)
export async function forceEVTarget(){
	const m = await fromUuid(MORTAL_WEAKNESS_TARGET_UUID);
	const p = await fromUuid(PERSONAL_ANTITHESIS_TARGET_UUID);
	let eff;
	
	let a = canvas.tokens.objects.children.find(token => token.actor?.getFlag("pf2e-thaum-vuln","activeEV") === true);
	let evM = a.actor.getFlag("pf2e-thaum-vuln","EVMode");
	let tID = a.actor.getFlag("pf2e-thaum-vuln","EVTargetID");
	let tar = Array.from(game.user.targets);
	if(evM === "mortal-weakness") {
		eff = m.toObject();
	} else if(evM === "personal-antithesis"){
		eff = p.toObject();
	} else {return}
	eff.system.rules[0].value = a.actor.getFlag("pf2e-thaum-vuln","EVValue");
	if(tar.length != 1) return ui.notifications.warn("Target only one token.");
	await tar[0].actor.createEmbeddedDocuments('Item', [eff]);
}


//This is a temporary fix until the next pf2e system update. The function hooks on renderChatMessage attack-rolls
//If the thaumaturge makes an attack-roll, the target's weakness updates with the correct amount
//If it's not the thaumaturge that makes the attack-roll, it changes the weakness to 0
Hooks.on("renderChatMessage", (message) => {
	if(message.speaker.actor && (message.flags?.pf2e?.context?.type === "attack-roll")){
		let a = message.speaker.actor;
		if(canvas.initialized && canvas.tokens.objects.children.find(token => token.actor.id === a)){
			if(a == canvas.tokens.objects.children.find(token => token.actor.items.find(item => item.getFlag("core","sourceId") === MORTAL_WEAKNESS_EFFECT_SOURCEID ? item : item.getFlag("core","sourceId") ===  PERSONAL_ANTITHESIS_EFFECT_SOURCEID)).actor.id){
				updateEVEffect(a, true);
			} else {
				updateEVEffect(a, false);
			}
		}
	}
},{once:false});

