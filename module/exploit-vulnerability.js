export const EXPLOIT_VULNERABILITY_ACTION_ID = "Compendium.pf2e.actionspf2e.fodJ3zuwQsYnBbtk";
export const MORTAL_WEAKNESS_EFFECT_SOURCEID = "Item.plf15q5mFglgWG8w"
export const MORTAL_WEAKNESS_EFFECT_UUID = "Compendium.pf2e-thaum-vuln.Thaumaturge Effects.N0jy0FFGS7ViTvs9";
export const PERSONAL_ANTITHESIS_EFFECT_SOURCEID = "Item.Ug14iErZQ2h2y7B2"
export const PERSONAL_ANTITHESIS_EFFECT_UUID = "Compendium.pf2e-thaum-vuln.Thaumaturge Effects.EGY7Rxcxwv1aEyHL";
export const FLAT_FOOTED_EFFECT_UUID = "Compendium.pf2e.conditionitems.AJh5ex99aV6VTggg";

export function createEVDialog(sa, t, paEffectSource, mwEffectSource) {
	return new Dialog({
		title: "Exploit Vulnerability",
		content: "<p>Choose whether to exploit a Personal Antithesis or Mortal Weakness</p>",
		buttons: {
			pa: {
				label: "Personal Antithesis",
				callback: () => sa.createEmbeddedDocuments('Item', [paEffectSource.toObject()])
			},
			mw: {
				label: "Mortal Weakness",
				callback: () => sa.createEmbeddedDocuments('Item', [mwEffectSource.toObject()])
			}
		},
		default: "pa",
		render: html => console.log("Register interactivity in the rendered dialog"),
		close: html => console.log("This always is logged no matter which option is chosen")
	});
}



export async function exploitVuln() {
	const DCByLevel = [13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36, 38, 39, 40, 42, 44, 46, 48, 50];
	const skillName = "Esoteric Lore";
	const skillKey = "esoteric-lore";
	const actionSlug = "action:recall-knowledge"
	const actionName = "Recall Knowledge"
	
	//grab the selected token and the targeted token
	const a = canvas.tokens.controlled;
	let ts = Array.from(game.user.targets);
	
	//make sure we're only targeting one target and have the thaum selected
	if (a.length != 1 || ts.length != 1){
		return ui.notifications.warn("Select one token and target one creature.")
	}
	
	//set the first index in the array as the target and the first controlled token actor as selected actor
	const t = Array.from(ts)[0];
	const sa = a[0].actor;
	
	//check for exploit vulnerability on the actor
	const exploitVulnAction = sa.items.find(item => item.getFlag("core", "sourceId") === EXPLOIT_VULNERABILITY_ACTION_ID);
	if (!exploitVulnAction) {
		return ui.notifications.warn(`${a[0].actor.name} does not have the ability to Exploit Vulnerability`);
	}
	
	//Exploit Vulnerability Effect/action - Tikael's macro code
	await exploitVulnAction.toMessage();
	const modifiers = [];
	let DC = DCByLevel[t.actor.system.details.level.value+1];
	const notes = [...sa.system.skills[skillKey].notes];

	const options = sa.getRollOptions(['all', 'skill-check', skillName.toLowerCase()]);
	options.push(`action:${actionSlug}`);

	let evRoll = await game.pf2e.Check.roll(
		new game.pf2e.CheckModifier(
			`<span class="pf2-icon">A</span> <b>${actionName}</b> - <p class="compact-text">${skillName } Skill Check</p>`,
			sa.system.skills[skillKey], modifiers), {
			actor: sa.actor,
			type: 'skill-check',
			options,
			notes,
			dc: {
			value: DC
			}
		},
		event
	);
	
	//deletes Exploit Vulnerability effect if it already exists on the actor
	let paExistingEffect = sa.items.find(item => item.getFlag("core", "sourceId") === PERSONAL_ANTITHESIS_EFFECT_SOURCEID);
	let mwExistingEffect = sa.items.find(item => item.getFlag("core", "sourceId") === MORTAL_WEAKNESS_EFFECT_SOURCEID);
	if(paExistingEffect) {
		paExistingEffect.delete();
	}
	if(mwExistingEffect) {
		mwExistingEffect.delete();
	}

	const paEffectSource = await fromUuid(PERSONAL_ANTITHESIS_EFFECT_UUID);
	const mwEffectSource = await fromUuid(MORTAL_WEAKNESS_EFFECT_UUID);
	const flatFootedEffect = await fromUuid(FLAT_FOOTED_EFFECT_UUID);
	
	const evDialog = createEVDialog(sa, t, paEffectSource, mwEffectSource);

	//Apply effect based on Degrees of success
	switch(evRoll.degreeOfSuccess)
	{
		case 0:
			//critical failure. Apply flatfooted condition for one round.
			await sa.createEmbeddedDocuments('Item', [flatFootedEffect.toObject()]);
			break;
		case 1:
			//normal failure. Can only apply personal antithesis.
			await sa.createEmbeddedDocuments('Item', [paEffectSource.toObject()]);
			break;
		case 2:
			//normal success. Learns highest weakness. Can apply Mortal Weakness or Personal Antithesis
			evDialog.render(true);
			break;
		case 3:
			//Critical success. Learns all weaknesses, resistances, and immunities including the amounts and any unusual weaknesses or vulnerabilities
			//Can apply Mortal Weakness or Personal Antithesis. 
			evDialog.render(true);
			break;
		default:
			return;
	}
	
	
}



	