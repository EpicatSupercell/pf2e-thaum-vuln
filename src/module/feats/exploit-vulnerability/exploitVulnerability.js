import { deleteEVEffect } from "../../socket.js";
import {
  PERSONAL_ANTITHESIS_EFFECT_UUID,
  FLAT_FOOTED_EFFECT_UUID,
} from "../../utils/index.js";
import { createEffectOnActor, getActorEVEffect } from "../../utils/helpers.js";
import { createEVDialog } from "./dialog.js";

async function exploitVuln() {
  //grab the selected token and the targeted token
  const a = canvas.tokens.controlled;
  let ts = Array.from(game.user.targets);

  //make sure we're only targeting one target and have the thaum selected
  if (a.length != 1 || ts.length != 1) {
    return ui.notifications.warn(
      game.i18n.localize(
        "pf2e-thaum-vuln.notifications.warn.exploitVulnerability.targetCount"
      )
    );
  }

  //set the first index in the array as the target and the first controlled token actor as selected actor
  const t = Array.from(ts)[0];
  const sa = a[0].actor;

  //check for exploit vulnerability on the actor
  const hasExploitVulnerability = sa.items.some(
    (i) => i.slug === "exploit-vulnerability"
  );

  if (!hasExploitVulnerability) {
    return ui.notifications.warn(
      game.i18n.localize(
        "pf2e-thaum-vuln.notifications.warn.exploitVulnerability.noExploitVulnerability"
      )
    );
  }

  if (game.settings.get("pf2e-thaum-vuln", "enforceHeldImplement")) {
    if (
      !sa.getFlag("pf2e-thaum-vuln", "selectedImplements") ||
      !sa
        .getFlag("pf2e-thaum-vuln", "selectedImplements")
        .some((i) => i !== null)
    ) {
      return ui.notifications.warn(
        "You do not have implements selected. Go to the inventory tab on your character sheet, click manage implements, and assign items to your implements."
      );
    }
    let implementUuids = new Array();
    for (const imp of sa.getFlag("pf2e-thaum-vuln", "selectedImplements")) {
      implementUuids.push(imp?.uuid);
    }
    const implementArray = await Promise.all(
      implementUuids.map(async (i) => {
        if (i) return await fromUuid(i);
      })
    );
    const hasHeldImplement = implementArray.some((i) => {
      return i?.isHeld;
    });
    if (!hasHeldImplement) {
      return ui.notifications.warn(
        "You do not have one of your implements held in order to Exploit Vulnerability."
      );
    }
  }

  //deletes Exploit Vulnerability effect if it already exists on the actor
  const deleteEffectTargs = preDeleteEffect(canvas.tokens.placeables, sa);
  if (deleteEffectTargs.length > 0) {
    deleteEVEffect(deleteEffectTargs.flat());
  }
  for (let act of canvas.tokens.placeables) {
    let EWEffect = act.actor?.items.find(
      (item) => item.name === "Esoteric Warden Effect"
    );
    if (
      EWEffect &&
      (act.actor === sa ||
        act.actor.getFlag("pf2e-thaum-vuln", "EWSourceActor") === sa.uuid)
    ) {
      EWEffect.delete();
    }
  }

  // From https://gist.github.com/stwlam/01c2506e93c298b01ad83c182b245144 by somebody, Supe, and stwlam
  const skill =
    sa.skills["esoteric-lore"] ??
    sa.skills["esoteric"] ??
    sa.skills["lore-esoteric"];
  if (!skill) {
    return ui.notifications.warn(
      game.i18n.localize(
        "pf2e-thaum-vuln.notifications.warn.exploitVulnerability.noEsotericLoreSkill"
      )
    );
  }
  const dc = {
    "-1": 13,
    ...Object.fromEntries(
      Object.entries([
        14, 15, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 34, 35, 36,
        38, 39, 40, 42, 44, 46, 48, 50,
      ])
    ),
  }[t.actor.level];
  if (!dc) {
    return ui.notifications.warn(
      game.i18n.localize(
        "pf2e-thaum-vuln.notifications.warn.exploitVulnerability.noMatchingDC"
      )
    );
  }

  const rollOptions = sa.getRollOptions(["skill-check", skill.slug]);

  const outcomes = {
    criticalSuccess:
      "You remember the creature's weaknesses, and as you empower your esoterica, you have a flash of insight that grants even more knowledge about the creature. You learn all of the creature's resistances, weaknesses, and immunities, including the amounts of the resistances and weaknesses and any unusual weaknesses or vulnerabilities, such as what spells will pass through a golem's antimagic. You can exploit either the creature's mortal weakness or personal antithesis (see below). Your unarmed and weapon Strikes against the creature also become magical if they weren't already.",
    success:
      "You recall an important fact about the creature, learning its highest weakness (or one of its highest weaknesses, if it has multiple with the same value) but not its other weaknesses, resistances, or immunities. You can exploit either the creature's mortal weakness or personal antithesis. Your unarmed and weapon Strikes against the creature also become magical if they weren't already.",
    failure:
      "Failing to recall a salient weakness about the creature, you instead attempt to exploit a more personal vulnerability. You can exploit only the creature's personal antithesis. Your unarmed and weapon Strikes against the creature also become magical if they weren't already.",
    criticalFailure:
      "You couldn't remember the right object to use and become distracted while you rummage through your esoterica. You become flat-footed until the beginning of your next turn.",
  };

  const notes = Object.entries(outcomes).map(([outcome, text]) => ({
    title: game.i18n.localize("PF2E.Check.Result.Degree.Check." + outcome),
    text,
    outcome: [outcome],
  }));

  const hasEsotericWarden = sa.items.some((i) => i.slug === "esoteric-warden");
  if (hasEsotericWarden) {
    notes.push({
      title: game.i18n.localize("pf2e-thaum-vuln.esotericWarden.name"),
      text: game.i18n.localize("pf2e-thaum-vuln.esotericWarden.flavor"),
      outcome: ["success", "criticalSuccess"],
    });
  }

  const hasDiverseLore = sa.items.some((i) => i.slug === "diverse-lore");
  if (hasDiverseLore) {
    // todo: put npc identify data in the document and then show secret text for it.
    const dc =
      t.actor.identificationDCs.standard.dc +
      game.settings.get("pf2e-thaum-vuln", "esotericLoreModifier");
    const diverseLoreDC = dc
      ? `<br/><span data-visibility="gm">Recall Knowledge DC ${dc}</span>`
      : "";

    notes.push({
      title: game.i18n.localize("pf2e-thaum-vuln.diverseLore.name"),
      text: `${
        game.i18n.localize("pf2e-thaum-vuln.diverseLore.flavor") + diverseLoreDC
      }`,
      outcome: ["success", "criticalSuccess"],
    });
  }

  const flavor = `${game.i18n.localize(
    "pf2e-thaum-vuln.exploitVulnerability.name"
  )}: ${skill.label}`;
  const checkModifier = new game.pf2e.CheckModifier(flavor, skill);
  const traits = ["esoterica", "manipulate", "thaumaturge"];
  const evRoll = await game.pf2e.Check.roll(
    checkModifier,
    {
      actor: sa,
      target: {
        actor: t.actor,
        token: t.document,
      },
      type: "skill-check",
      options: rollOptions,
      notes,
      dc: { value: dc },
      traits: traits.map((t) => ({
        name: t,
        label: CONFIG.PF2E.actionTraits[t] ?? t,
        description: CONFIG.PF2E.traitsDescriptions[t],
      })),
      flavor: `
    <strong>${game.i18n.localize(
      "pf2e-thaum-vuln.exploitVulnerability.frequency.label"
    )}</strong> ${game.i18n.localize(
        "pf2e-thaum-vuln.exploitVulnerability.frequency.text"
      )}<br/>
    <strong>${game.i18n.localize(
      "pf2e-thaum-vuln.exploitVulnerability.requirements.label"
    )}</strong> ${game.i18n.localize(
        "pf2e-thaum-vuln.exploitVulnerability.requirements.text"
      )}<br/>
    <hr/>
    <p>${game.i18n.localize("pf2e-thaum-vuln.exploitVulnerability.flavor")}</p>
  `,
    },
    event
  );

  const flatFootedEffect = await fromUuid(FLAT_FOOTED_EFFECT_UUID);
  const paEffectSource = await fromUuid(PERSONAL_ANTITHESIS_EFFECT_UUID);

  const rollDOS = evRoll.degreeOfSuccess;
  //Apply effect based on Degrees of success
  switch (rollDOS) {
    case 0:
      //critical failure. Apply flat footed condition for one round.
      await sa.createEmbeddedDocuments("Item", [flatFootedEffect.toObject()]);
      break;
    case 1:
      //normal failure. Can only apply personal antithesis.

      await createEffectOnActor(sa, t, paEffectSource);
      break;
    case 2:
      //normal success. Learns highest weakness. Can apply Mortal Weakness or Personal Antithesis
      await createEVDialog(sa, t, 2);
      break;
    case 3:
      //Critical success. Learns all weaknesses, resistances, and immunities including the amounts and any unusual weaknesses or vulnerabilities
      //Can apply Mortal Weakness or Personal Antithesis.
      await createEVDialog(sa, t, 3);
      break;
    default:
      return;
  }
}

function preDeleteEffect(a, sa = undefined) {
  let effects = new Array();
  for (let token of a) {
    token = token.actor ?? token;
    const effs = getActorEVEffect(token, sa?.uuid);
    for (const effect of effs) {
      if (
        effect.flags["pf2e-thaum-vuln"]?.EffectOrigin === sa?.uuid ||
        effect.flags["pf2e-thaum-vuln"]?.EffectOrigin === token?.uuid
      ) {
        effects.push(effect.uuid);
      }
    }
  }
  return effects;
}

export { exploitVuln, preDeleteEffect };
